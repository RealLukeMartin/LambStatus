---
AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS resources for serverless status pages"
Parameters:
  UserName:
    Description: Your user name
    Type: String
    Default: admin
    MinLength: 1
  UserEmail:
    Description: Your email address. The initial login information will be sent to the address.
    Type: String
    # The pattern is included in the error message, so the simpler pattern is preferable. Based on http://stackoverflow.com/a/8204716
    AllowedPattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
Mappings:
  Constants:
    LambStatus:
      Version: 0.3.1
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Statement:
              - Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                Effect: Allow
                Resource: arn:aws:logs:*:*:*
        - PolicyName: DynamoDB
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub |-
                  arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ServiceComponentTable}
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub |-
                  arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${IncidentTable}
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub |-
                  arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${IncidentUpdateTable}
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub |-
                  arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MaintenanceTable}
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub |-
                  arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MaintenanceUpdateTable}
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub |-
                  arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MetricsTable}
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub |-
                  arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SettingsTable}
        - PolicyName: CloudFormation
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: cloudformation:DescribeStacks
                Resource: !Sub |-
                  arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*
        - PolicyName: S3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub |-
                    arn:aws:s3:::${StatusPageS3}
                  - !Sub |-
                    arn:aws:s3:::${AdminPageS3}
                  - arn:aws:s3:::lambstatus
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub |-
                    arn:aws:s3:::${StatusPageS3}/*
                  - !Sub |-
                    arn:aws:s3:::${AdminPageS3}/*
                  - arn:aws:s3:::lambstatus/*
        - PolicyName: CloudWatch
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:GetMetricData
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                Resource: "*"
        - PolicyName: Cognito
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:*
                  - iam:PassRole
                Resource: '*'
        - PolicyName: APIGateway
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - apigateway:POST
                Resource: !Sub |-
                  arn:aws:apigateway:${AWS::Region}::/restapis/${RestApi}/deployments
        - PolicyName: SNS
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: sns:publish
                Resource:
                  Ref: IncidentNotificationTopic
  GetComponentsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/GetComponents.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Get a list of components"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-GetComponents
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  GetComponentsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "GetComponentsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/components
  PostComponentsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/PostComponents.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Create a new component"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PostComponents
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  PostComponentsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PostComponentsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/components
  PatchComponentsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/PatchComponents.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Update an existing component"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PatchComponents
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  PatchComponentsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PatchComponentsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/PATCH/components/{componentid}
  DeleteComponentsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/DeleteComponents.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Delete an existing component"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-DeleteComponents
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  DeleteComponentsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "DeleteComponentsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/DELETE/components/{componentid}
  GetIncidentsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/GetIncidents.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Get a list of incidents"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-GetIncidents
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  GetIncidentsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "GetIncidentsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/incidents
  PostIncidentsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/PostIncidents.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Create a new incident"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PostIncidents
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  PostIncidentsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PostIncidentsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/incidents
  PatchIncidentsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/PatchIncidents.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Update an existing incident"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PatchIncidents
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  PatchIncidentsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PatchIncidentsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/PATCH/incidents/{incidentid}
  DeleteIncidentsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/DeleteIncidents.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Delete an incident"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-DeleteIncidents
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  DeleteIncidentsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "DeleteIncidentsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/DELETE/incidents/{incidentid}
  GetIncidentUpdatesLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/GetIncidentUpdates.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Get incident updates"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-GetIncidentUpdates
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  GetIncidentUpdatesLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "GetIncidentUpdatesLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/incidents/{incidentid}/incidentupdates
  GetMaintenancesLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/GetMaintenances.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Get a list of maintenances"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-GetMaintenances
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  GetMaintenancesLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "GetMaintenancesLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/maintenances
  PostMaintenancesLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/PostMaintenances.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Create a new maintenance"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PostMaintenances
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  PostMaintenancesLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PostMaintenancesLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/maintenances
  PatchMaintenancesLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/PatchMaintenances.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Update an existing maintenance"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PatchMaintenances
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  PatchMaintenancesLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PatchMaintenancesLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/PATCH/maintenances/{maintenanceid}
  DeleteMaintenancesLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/DeleteMaintenances.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Delete an maintenance"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-DeleteMaintenances
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  DeleteMaintenancesLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "DeleteMaintenancesLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/DELETE/maintenances/{maintenanceid}
  GetMaintenanceUpdatesLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/GetMaintenanceUpdates.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Get maintenance updates"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-GetMaintenanceUpdates
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  GetMaintenanceUpdatesLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "GetMaintenanceUpdatesLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/maintenances/{maintenanceid}/maintenanceupdates
  GetSettingsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/GetSettings.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Get settings"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-GetSettings
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  GetSettingsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "GetSettingsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/settings
  GetPublicSettingsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/GetPublicSettings.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Get settings"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-GetPublicSettings
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  GetPublicSettingsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "GetPublicSettingsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/public-settings
  PatchSettingsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/PatchSettings.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Patch settings"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PatchSettings
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: "nodejs4.3"
      Timeout: 30
  PatchSettingsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PatchSettingsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/PATCH/settings
  GetExternalMetricsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/GetExternalMetrics.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Get external metrics"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-GetExternalMetrics
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  GetExternalMetricsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "GetExternalMetricsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/external-metrics
  GetPublicMetricsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/GetPublicMetrics.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Get public metrics"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-GetPublicMetrics
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  GetPublicMetricsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "GetPublicMetricsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/public-metrics
  GetMetricsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/GetMetrics.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Get metrics"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-GetMetrics
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  GetMetricsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "GetMetricsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/metrics
  PostMetricsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/PostMetrics.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Post a new metric"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PostMetrics
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  PostMetricsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PostMetricsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/metrics
  PatchMetricsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/PatchMetrics.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Update the existing metric"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-PatchMetrics
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  PatchMetricsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "PatchMetricsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/PATCH/metrics/{metricid}
  DeleteMetricsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/DeleteMetrics.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Update the existing metric"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-DeleteMetrics
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  DeleteMetricsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "DeleteMetricsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/DELETE/metrics/{metricid}
  CollectMetricsDataLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/CollectMetricsData.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Collect metrics data"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-CollectMetricsData
      Handler: "_apex_index.handle"
      MemorySize: 512
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 60
  CollectMetricsDataLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "CollectMetricsDataLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !Sub |-
        arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/*
  CollectMetricsDataEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: The periodical event to collect metrics data
      ScheduleExpression: rate(1 minute)
      Targets:
        - Arn:
            Fn::GetAtt:
              - "CollectMetricsDataLambdaFunction"
              - "Arn"
          Id: CollectMetricsDataFunction
          Input: !Sub |-
            {"StatusPageS3BucketName": "${StatusPageS3}"}
  UpdateFeedsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/UpdateFeeds.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Update feeds"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-UpdateFeeds
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaRole"
          - "Arn"
      Runtime: "nodejs4.3"
      Timeout: 30
  UpdateFeedsLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - "UpdateFeedsLambdaFunction"
          - "Arn"
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn:
        Ref: "IncidentNotificationTopic"
  IncidentNotificationTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: !Sub |-
        ${AWS::StackName}-IncidentNotification
  IncidentSubscriptionByUpdateFeeds:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !Sub |-
        ${UpdateFeedsLambdaFunction.Arn}
      Protocol: "lambda"
      TopicArn:
        Ref: "IncidentNotificationTopic"
  ApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId:
        Ref: "RestApi"
      Description: "Production deployment"
      StageName: "prod"
    # The deployment resource must depend on the RestApi's methods.
    # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-deployment.html#aws-resource-apigateway-deployment-examples
    DependsOn:
      - "RestApi"
      - "ComponentsApiResource"
      - "ComponentApiResource"
      - "IncidentsApiResource"
      - "IncidentApiResource"
      - "IncidentUpdatesApiResource"
      - "MaintenancesApiResource"
      - "MaintenanceApiResource"
      - "MaintenanceUpdatesApiResource"
      - "ExternalMetricsApiResource"
      - "PublicMetricsApiResource"
      - "MetricsApiResource"
      - "MetricApiResource"
      - "GetComponentsApiMethod"
      - "PostComponentsApiMethod"
      - "OptionsComponentsApiMethod"
      - "PatchComponentApiMethod"
      - "DeleteComponentApiMethod"
      - "OptionsComponentApiMethod"
      - "GetIncidentsApiMethod"
      - "PostIncidentsApiMethod"
      - "OptionsIncidentsApiMethod"
      - "PatchIncidentApiMethod"
      - "DeleteIncidentApiMethod"
      - "OptionsIncidentApiMethod"
      - "GetIncidentUpdatesApiMethod"
      - "OptionsIncidentUpdatesApiMethod"
      - "GetMaintenancesApiMethod"
      - "PostMaintenancesApiMethod"
      - "OptionsMaintenancesApiMethod"
      - "PatchMaintenanceApiMethod"
      - "DeleteMaintenanceApiMethod"
      - "OptionsMaintenanceApiMethod"
      - "GetMaintenanceUpdatesApiMethod"
      - "OptionsMaintenanceUpdatesApiMethod"
      - "GetExternalMetricsApiMethod"
      - "OptionsExternalMetricsApiMethod"
      - "GetPublicMetricsApiMethod"
      - "OptionsPublicMetricsApiMethod"
      - "GetMetricsApiMethod"
      - "PostMetricsApiMethod"
      - "OptionsMetricsApiMethod"
      - "PatchMetricApiMethod"
      - "DeleteMetricApiMethod"
      - "OptionsMetricApiMethod"
  RestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Description: "API for page status"
      Name:
        Ref: "AWS::StackName"
  Authorizer:
    Type: "AWS::ApiGateway::Authorizer"
    Properties:
      IdentitySource: method.request.header.Authorization
      Name: CognitoUserPool
      ProviderARNs:
        - !Sub |-
          arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool.UserPoolID}
      RestApiId:
        Ref: "RestApi"
      Type: COGNITO_USER_POOLS
  ComponentsApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Fn::GetAtt:
          - "RestApi"
          - "RootResourceId"
      PathPart: "components"
  ComponentApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "ComponentsApiResource"
      PathPart: "{componentid}"
  GetComponentsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "ComponentsApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetComponentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  PostComponentsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "ComponentsApiResource"
      HttpMethod: "POST"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PostComponentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  OptionsComponentsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "ComponentsApiResource"
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Requested-With,X-Requested-By,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  PatchComponentApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "ComponentApiResource"
      HttpMethod: "PATCH"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "body":$input.json('$'),
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PatchComponentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  DeleteComponentApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "ComponentApiResource"
      HttpMethod: "DELETE"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "DeleteComponentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "204"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "204"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  OptionsComponentApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "ComponentApiResource"
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Requested-With,X-Requested-By,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'PATCH,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  IncidentsApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Fn::GetAtt:
          - "RestApi"
          - "RootResourceId"
      PathPart: "incidents"
  GetIncidentsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "IncidentsApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetIncidentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  PostIncidentsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "IncidentsApiResource"
      HttpMethod: "POST"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PostIncidentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  OptionsIncidentsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "IncidentsApiResource"
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Requested-With,X-Requested-By,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  IncidentApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "IncidentsApiResource"
      PathPart: "{incidentid}"
  PatchIncidentApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "IncidentApiResource"
      HttpMethod: "PATCH"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "body":$input.json('$'),
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PatchIncidentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  DeleteIncidentApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "IncidentApiResource"
      HttpMethod: "DELETE"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "DeleteIncidentsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "204"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "204"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  OptionsIncidentApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "IncidentApiResource"
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Requested-With,X-Requested-By,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'PATCH,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  IncidentUpdatesApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "IncidentApiResource"
      PathPart: "incidentupdates"
  GetIncidentUpdatesApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "IncidentUpdatesApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetIncidentUpdatesLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  OptionsIncidentUpdatesApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "IncidentUpdatesApiResource"
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Requested-With,X-Requested-By,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  MaintenancesApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Fn::GetAtt:
          - "RestApi"
          - "RootResourceId"
      PathPart: "maintenances"
  GetMaintenancesApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "MaintenancesApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetMaintenancesLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  PostMaintenancesApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "MaintenancesApiResource"
      HttpMethod: "POST"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PostMaintenancesLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  OptionsMaintenancesApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "MaintenancesApiResource"
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Requested-With,X-Requested-By,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  MaintenanceApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "MaintenancesApiResource"
      PathPart: "{maintenanceid}"
  PatchMaintenanceApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "MaintenanceApiResource"
      HttpMethod: "PATCH"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "body":$input.json('$'),
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PatchMaintenancesLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  DeleteMaintenanceApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "MaintenanceApiResource"
      HttpMethod: "DELETE"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "DeleteMaintenancesLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "204"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "204"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  OptionsMaintenanceApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "MaintenanceApiResource"
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Requested-With,X-Requested-By,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'PATCH,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  MaintenanceUpdatesApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "MaintenanceApiResource"
      PathPart: "maintenanceupdates"
  GetMaintenanceUpdatesApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "MaintenanceUpdatesApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetMaintenanceUpdatesLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  OptionsMaintenanceUpdatesApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "MaintenanceUpdatesApiResource"
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Requested-With,X-Requested-By,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  ExternalMetricsApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Fn::GetAtt:
          - "RestApi"
          - "RootResourceId"
      PathPart: "external-metrics"
  GetExternalMetricsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "ExternalMetricsApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      RequestParameters:
        method.request.querystring.type: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetExternalMetricsLambdaFunction"
                - "Arn"
        RequestTemplates:
          application/json: !Sub |-
            {"type":"$input.params('type')"}
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  OptionsExternalMetricsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "ExternalMetricsApiResource"
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Requested-With,X-Requested-By,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  PublicMetricsApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Fn::GetAtt:
          - "RestApi"
          - "RootResourceId"
      PathPart: "public-metrics"
  GetPublicMetricsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "PublicMetricsApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetPublicMetricsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  OptionsPublicMetricsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "PublicMetricsApiResource"
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Requested-With,X-Requested-By,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  MetricsApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Fn::GetAtt:
          - "RestApi"
          - "RootResourceId"
      PathPart: "metrics"
  MetricApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Ref: "MetricsApiResource"
      PathPart: "{metricid}"
  GetMetricsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "MetricsApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetMetricsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  PostMetricsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "MetricsApiResource"
      HttpMethod: "POST"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PostMetricsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  OptionsMetricsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "MetricsApiResource"
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Requested-With,X-Requested-By,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  PatchMetricApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "MetricApiResource"
      HttpMethod: "PATCH"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "body":$input.json('$'),
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PatchMetricsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  DeleteMetricApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "MetricApiResource"
      HttpMethod: "DELETE"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "DeleteMetricsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "204"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "204"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  OptionsMetricApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "MetricApiResource"
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Requested-With,X-Requested-By,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'PATCH,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  PublicSettingsApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Fn::GetAtt:
          - "RestApi"
          - "RootResourceId"
      PathPart: "public-settings"
  GetPublicSettingsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "PublicSettingsApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetPublicSettingsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  OptionsPublicSettingsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "PublicSettingsApiResource"
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Requested-With,X-Requested-By,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  SettingsApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ParentId:
        Fn::GetAtt:
          - "RestApi"
          - "RootResourceId"
      PathPart: "settings"
  GetSettingsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "SettingsApiResource"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "GetSettingsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  PatchSettingsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "SettingsApiResource"
      HttpMethod: "PATCH"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId:
        Ref: "Authorizer"
      ApiKeyRequired: false
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates:
          application/json: !Sub |-
            {
              "body":$input.json('$'),
              "params":{
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
          - Function:
              Fn::GetAtt:
                - "PatchSettingsLambdaFunction"
                - "Arn"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: "400"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            SelectionPattern: ".*Error.*"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  OptionsSettingsApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "RestApi"
      ResourceId:
        Ref: "SettingsApiResource"
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      Integration:
        Type: "MOCK"
        RequestTemplates:
          application/json: "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Requested-With,X-Requested-By,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  StatusPageS3:
    Type: "AWS::S3::Bucket"
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
            AllowedOrigins:
              - "*"
      WebsiteConfiguration:
        IndexDocument: "index.html"
  StatusPageS3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket:
        Ref: "StatusPageS3"
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Action:
              - "s3:GetObject"
            Principal: "*"
            Resource: !Sub |-
              arn:aws:s3:::${StatusPageS3}/*
  StatusPageDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Origins:
          - DomainName:
              !Select [ 2, !Split [ /, !GetAtt StatusPageS3.WebsiteURL ] ]
            Id:
              Ref: "StatusPageS3"
            CustomOriginConfig:
              OriginProtocolPolicy: "http-only"
        Enabled: "true"
        Comment: "Distribution for status page of LambStatus"
        DefaultRootObject: "index.html"
        DefaultCacheBehavior:
          DefaultTTL: 0
          TargetOriginId:
            Ref: "StatusPageS3"
          ForwardedValues:
            QueryString: "false"
            Cookies:
              Forward: "none"
          ViewerProtocolPolicy: "allow-all"
        PriceClass: "PriceClass_200"
        ViewerCertificate:
          CloudFrontDefaultCertificate: "true"
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: "/index.html"
  AdminPageS3:
    Type: "AWS::S3::Bucket"
    Properties:
      WebsiteConfiguration:
        IndexDocument: "index.html"
  AdminPageS3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket:
        Ref: "AdminPageS3"
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Action:
              - "s3:GetObject"
            Principal: "*"
            Resource: !Sub |-
              arn:aws:s3:::${AdminPageS3}/*
  AdminPageDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Origins:
          - DomainName:
              !Select [ 2, !Split [ /, !GetAtt AdminPageS3.WebsiteURL ] ]
            Id:
              Ref: "AdminPageS3"
            CustomOriginConfig:
              OriginProtocolPolicy: "http-only"
        Enabled: "true"
        Comment: "Distribution for admin page of LambStatus"
        DefaultRootObject: "index.html"
        DefaultCacheBehavior:
          DefaultTTL: 0
          TargetOriginId:
            Ref: "AdminPageS3"
          ForwardedValues:
            QueryString: "false"
            Cookies:
              Forward: "none"
          ViewerProtocolPolicy: "allow-all"
        PriceClass: "PriceClass_200"
        ViewerCertificate:
          CloudFrontDefaultCertificate: "true"
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: "/index.html"
  ServiceComponentTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      # The prefix of table name must be stack name
      TableName: !Sub |-
        ${AWS::StackName}-ServiceComponentTable
      AttributeDefinitions:
        - AttributeName: "componentID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "componentID"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
  IncidentTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      # The prefix of table name must be stack name
      TableName: !Sub |-
        ${AWS::StackName}-IncidentTable
      AttributeDefinitions:
        - AttributeName: "incidentID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "incidentID"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
  IncidentUpdateTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      # The prefix of table name must be stack name
      TableName: !Sub |-
        ${AWS::StackName}-IncidentUpdateTable
      AttributeDefinitions:
        - AttributeName: "incidentID"
          AttributeType: "S"
        - AttributeName: "incidentUpdateID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "incidentID"
          KeyType: "HASH"
        - AttributeName: "incidentUpdateID"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
  MaintenanceTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      # The prefix of table name must be stack name
      TableName: !Sub |-
        ${AWS::StackName}-MaintenanceTable
      AttributeDefinitions:
        - AttributeName: "maintenanceID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "maintenanceID"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
  MaintenanceUpdateTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      # The prefix of table name must be stack name
      TableName: !Sub |-
        ${AWS::StackName}-MaintenanceUpdateTable
      AttributeDefinitions:
        - AttributeName: "maintenanceID"
          AttributeType: "S"
        - AttributeName: "maintenanceUpdateID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "maintenanceID"
          KeyType: "HASH"
        - AttributeName: "maintenanceUpdateID"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
  MetricsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      # The prefix of table name must be stack name
      TableName: !Sub |-
        ${AWS::StackName}-MetricsTable
      AttributeDefinitions:
        - AttributeName: "metricID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "metricID"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
  SettingsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      # The prefix of table name must be stack name
      TableName: !Sub |-
        ${AWS::StackName}-SettingsTable
      AttributeDefinitions:
        - AttributeName: "key"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "key"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
  S3PutObjectFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/S3PutObject.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: Put an object into S3.
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-S3PutObject
      Handler: "_apex_index.handle"
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: nodejs4.3
      Timeout: 30
  S3SyncObjectsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/S3SyncObjects.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: Sync S3 objects.
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-S3SyncObjects
      Handler: "_apex_index.handle"
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: nodejs4.3
      Timeout: 30
  CognitoCreateUserPoolFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/CognitoCreateUserPool.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: Create a user pool.
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-CognitoCreateUserPool
      Handler: "_apex_index.handle"
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: nodejs4.3
      Timeout: 30
  CognitoCreateUserPoolClientFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/CognitoCreateUserPoolClient.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: Create a user pool client.
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-CognitoCreateUserPoolClient
      Handler: "_apex_index.handle"
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: nodejs4.3
      Timeout: 30
  CognitoCreateUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/CognitoCreateUser.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: Create a user.
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-CognitoCreateUser
      Handler: "_apex_index.handle"
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: nodejs4.3
      Timeout: 30
  APIGatewayDeployFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/APIGatewayDeploy.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: Deploy the APIGateway.
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-APIGatewayDeploy
      Handler: "_apex_index.handle"
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: nodejs4.3
      Timeout: 30
  DBCreateItemsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub |-
          lambstatus-${AWS::Region}
        S3Key: !Sub
          - fn/${Version}/DBCreateItems.zip
          - Version:
              Fn::FindInMap: [ Constants, LambStatus, Version ]
      Description: "Create items"
      # The prefix of function name must be stack name
      FunctionName: !Sub |-
        ${AWS::StackName}-DBCreateItems
      Handler: "_apex_index.handle"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: "nodejs4.3"
      Timeout: 30
  StatusPageApiInfo:
    Type: Custom::S3PutObject
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - S3PutObjectFunction
          - Arn
      Region: !Sub |-
        ${AWS::Region}
      Bucket:
        Ref: StatusPageS3
      Key: settings.json
      Body: !Sub |-
        {"InvocationURL": "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"}
  AdminPageApiInfo:
    Type: Custom::S3PutObject
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - S3PutObjectFunction
          - Arn
      Region: !Sub |-
        ${AWS::Region}
      Bucket:
        Ref: AdminPageS3
      Key: settings.json
      Body: !Sub |-
        {"InvocationURL": "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/", "UserPoolID": "${CognitoUserPool.UserPoolID}", "ClientID": "${CognitoUserPoolClient.UserPoolClientID}"}
  DBInitialItems:
    Type: Custom::DBCreateItems
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - DBCreateItemsLambdaFunction
          - Arn
      CognitoPoolID: !Sub |-
        ${CognitoUserPool.UserPoolID}
      AdminPageURL: !Sub |-
        https://${AdminPageDistribution.DomainName}
      StatusPageURL: !Sub |-
        https://${StatusPageDistribution.DomainName}
      IncidentNotificationTopic:
        Ref: "IncidentNotificationTopic"
  StatusPageFrontend:
    Type: Custom::S3SyncObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - S3SyncObjectsFunction
          - Arn
      SourceBucket: lambstatus
      SourceKey: !Sub
        - status-page/${Version}
        - Version:
            Fn::FindInMap: [ Constants, LambStatus, Version ]
      DestinationRegion: !Sub |-
        ${AWS::Region}
      DestinationBucket:
        Ref: StatusPageS3
  AdminPageFrontend:
    Type: Custom::S3SyncObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - S3SyncObjectsFunction
          - Arn
      SourceBucket: lambstatus
      SourceKey: !Sub
        - admin-page/${Version}
        - Version:
            Fn::FindInMap: [ Constants, LambStatus, Version ]
      DestinationRegion: !Sub |-
        ${AWS::Region}
      DestinationBucket:
        Ref: AdminPageS3
  CognitoSMSCallerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cognito-idp.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SNSPublish
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sns:publish
                Resource: '*'
  CognitoUserPool:
    Type: Custom::CognitoUserPool
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CognitoCreateUserPoolFunction
          - Arn
      Region: !Sub |-
        ${AWS::Region}
      PoolName: !Sub |-
        ${AWS::StackName}
      AdminPageURL: !Sub |-
        https://${AdminPageDistribution.DomainName}
      SnsCallerArn: !Sub |-
        ${CognitoSMSCallerRole.Arn}
  CognitoUserPoolClient:
    Type: Custom::CognitoUserPoolClient
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CognitoCreateUserPoolClientFunction
          - Arn
      Region: !Sub |-
        ${AWS::Region}
      ClientName: Browser
      UserPoolID: !Sub |-
        ${CognitoUserPool.UserPoolID}
  CognitoInitialUser:
    Type: Custom::CognitoInitialUser
    Properties:
      ServiceToken: !Sub |-
        ${CognitoCreateUserFunction.Arn}
      UserPoolID: !Sub |-
        ${CognitoUserPool.UserPoolID}
      Email: !Sub |-
        ${UserEmail}
      UserName: !Sub |-
        ${UserName}
  APIGatewayDeploy:
    Type: Custom::APIGatewayDeploy
    Properties:
      ServiceToken: !Sub |-
        ${APIGatewayDeployFunction.Arn}
      RestApiId: !Sub |-
        ${RestApi}
      StageName: prod
      # this custom resource is updated when this parameter is changed.
      Version: !Sub
        - ${Version}
        - Version:
            Fn::FindInMap: [ Constants, LambStatus, Version ]
    DependsOn:
      - ApiDeployment
Outputs:
  LambdaRoleArn:
    Value:
      !GetAtt LambdaRole.Arn
  AdminPageS3BucketURL:
    Value:
      Fn::GetAtt:
        - "AdminPageS3"
        - "WebsiteURL"
    Description: "URL of S3 bucket for hosting admin page"
  AdminPageS3BucketName:
    Value:
      Ref: "AdminPageS3"
  AdminPageCloudFrontURL:
    Value: !Sub |-
      https://${AdminPageDistribution.DomainName}
  StatusPageS3BucketURL:
    Value:
      Fn::GetAtt:
        - "StatusPageS3"
        - "WebsiteURL"
    Description: "URL of S3 bucket for hosting status page"
  StatusPageS3BucketName:
    Value:
      Ref: "StatusPageS3"
  StatusPageCloudFrontURL:
    Value: !Sub |-
      https://${StatusPageDistribution.DomainName}
  InvocationURL:
    Value: !Sub |-
      https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/
  UserPoolID:
    Value: !Sub |-
      ${CognitoUserPool.UserPoolID}
  UserPoolClientID:
    Value: !Sub |-
      ${CognitoUserPoolClient.UserPoolClientID}
  Version:
    Value:
      Fn::FindInMap: [ Constants, LambStatus, Version ]
  IncidentNotificationTopic:
    Value:
      Ref: "IncidentNotificationTopic"
